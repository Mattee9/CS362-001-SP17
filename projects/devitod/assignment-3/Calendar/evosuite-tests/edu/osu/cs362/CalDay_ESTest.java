/*
 * This file was automatically generated by EvoSuite
 * Tue May 16 00:24:43 GMT 2017
 */

package edu.osu.cs362;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import edu.osu.cs362.Appt;
import edu.osu.cs362.CalDay;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Locale;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CalDay_ESTest extends CalDay_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 23, 23, 23, 23, 23);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(4, 23, 11, 4, 23, "\t --- 11/23/24 --- \n --- -------- Appointments ------------ --- \n\n", "");
      calDay0.addAppt(appt0);
      Appt appt1 = new Appt(23, 23, 4, 4, 4, "", "");
      calDay0.addAppt(appt1);
      assertEquals(2, calDay0.getSizeAppts());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Iterator<?> iterator0 = calDay0.iterator();
      assertEquals(2014, calDay0.getYear());
      assertEquals(14, calDay0.getDay());
      assertEquals(1, calDay0.getMonth());
      assertNotNull(iterator0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      boolean boolean0 = calDay0.isValid();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getYear();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.year = (-1828);
      int int0 = calDay0.getYear();
      assertEquals((-1828), int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(1, 1, 1, 3718, 1, " at ", "");
      appt0.setStartMonth(1);
      calDay0.addAppt(appt0);
      int int0 = calDay0.getSizeAppts();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Locale locale0 = new Locale("(jo5XT-3o*H9e", "(jo5XT-3o*H9e");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      int int0 = calDay0.getMonth();
      assertEquals(1, int0);
      assertEquals(14, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(2014, calDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.month = (-1224);
      int int0 = calDay0.getMonth();
      assertEquals((-1224), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getDay();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2821), (-718), (-2821));
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      calDay0.day = (-718);
      int int0 = calDay0.getDay();
      assertEquals((-718), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      LinkedList<Appt> linkedList0 = calDay0.getAppts();
      assertNull(linkedList0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(1, 1, 1, 3718, 1, " at ", "");
      appt0.setStartMonth(1);
      calDay0.addAppt(appt0);
      calDay0.getAppts();
      assertEquals(1, calDay0.getSizeAppts());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.getSizeAppts();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      // Undeclared exception!
      try { 
        calDay0.addAppt((Appt) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay((GregorianCalendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1067), (-1067), (-1429));
      mockGregorianCalendar0.setLenient(false);
      CalDay calDay0 = null;
      try {
        calDay0 = new CalDay(mockGregorianCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // YEAR
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2821), (-718), (-2821));
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      int int0 = calDay0.getYear();
      assertEquals(2890, int0);
      assertEquals(9, calDay0.getDay());
      assertEquals(5, calDay0.getMonth());
      assertTrue(calDay0.isValid());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2821), (-718), (-2821));
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      int int0 = calDay0.getDay();
      assertEquals(5, calDay0.getMonth());
      assertTrue(calDay0.isValid());
      assertEquals(9, int0);
      assertEquals(2890, calDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      int int0 = calDay0.getMonth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2821), (-718), (-2821));
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      calDay0.getAppts();
      assertEquals(9, calDay0.getDay());
      assertTrue(calDay0.isValid());
      assertEquals(5, calDay0.getMonth());
      assertEquals(2890, calDay0.getYear());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2821), (-718), (-2821));
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      boolean boolean0 = calDay0.isValid();
      assertEquals(5, calDay0.getMonth());
      assertEquals(2890, calDay0.getYear());
      assertTrue(boolean0);
      assertEquals(9, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 23, 23, 23, 23, 23);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(4, 23, 11, 4, 23, "\t --- 11/23/24 --- \n --- -------- Appointments ------------ --- \n\n", "");
      calDay0.addAppt(appt0);
      calDay0.toString();
      assertEquals(1, calDay0.getSizeAppts());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      String string0 = calDay0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(23, 23, 23, 23, 23, 23);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(4, 23, 11, 4, 23, "\t --- 11/23/24 --- \n --- -------- Appointments ------------ --- \n\n", "");
      Appt appt1 = new Appt(23, 23, 4, 4, 4, "", "");
      calDay0.addAppt(appt1);
      calDay0.addAppt(appt0);
      assertEquals(2, calDay0.getSizeAppts());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(1, 1, 1, 3718, 1, " at ", "");
      appt0.setStartMonth(1);
      calDay0.addAppt(appt0);
      calDay0.addAppt(appt0);
      assertEquals(2, calDay0.getSizeAppts());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2821), (-718), (-2821));
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      Appt appt0 = new Appt(754, 1357, (-2821), (-813), 0, "", "");
      calDay0.addAppt(appt0);
      assertEquals(5, calDay0.getMonth());
      assertEquals(2890, calDay0.getYear());
      assertEquals(0, calDay0.getSizeAppts());
      assertTrue(calDay0.isValid());
      assertEquals(9, calDay0.getDay());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2821), (-718), (-2821));
      CalDay calDay0 = new CalDay(mockGregorianCalendar0);
      calDay0.getSizeAppts();
      assertTrue(calDay0.isValid());
      assertEquals(2890, calDay0.getYear());
      assertEquals(9, calDay0.getDay());
      assertEquals(5, calDay0.getMonth());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.iterator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      calDay0.valid = true;
      // Undeclared exception!
      try { 
        calDay0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("edu.osu.cs362.CalDay", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      CalDay calDay0 = new CalDay();
      Iterator<?> iterator0 = calDay0.iterator();
      assertNull(iterator0);
  }
}
